//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""Game"",
            ""id"": ""0dc9999b-c8e7-4ef0-a3e2-deb58c1d8be5"",
            ""actions"": [
                {
                    ""name"": ""Navigate Cruceta"",
                    ""type"": ""Value"",
                    ""id"": ""72e3b8d7-c253-40aa-884e-67b705ffdcac"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Submit A"",
                    ""type"": ""Button"",
                    ""id"": ""8408962e-43e5-45c5-9cc8-feeafc7b0bea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel B"",
                    ""type"": ""Button"",
                    ""id"": ""fde101e7-c4b4-401b-be59-fe9ba5c7a350"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause Options"",
                    ""type"": ""Button"",
                    ""id"": ""2e0b2db4-f64e-484c-821a-97aa9d5eb33a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Clutch"",
                    ""type"": ""Button"",
                    ""id"": ""8394c5f0-c93a-4ee5-9df2-980157543901"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Nitro Y"",
                    ""type"": ""Button"",
                    ""id"": ""38bba2a2-f276-449d-86f1-c4860ee59a03"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""X"",
                    ""type"": ""Button"",
                    ""id"": ""89b29c65-c0ed-48c8-b8cc-72a0491685b5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f5ad99cc-bca6-4a19-b6fb-9ada8fb0b85c"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate Cruceta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d32db14-252b-41b5-abca-1b65dd17601d"",
                    ""path"": ""<HID::Logitech G29 Driving Force Racing Wheel>/hat"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate Cruceta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""29c12a6b-d4a8-48c5-8198-c0e4e4fb6a3f"",
                    ""path"": ""<HID::Logitech G920 Driving Force Racing Wheel for Xbox One>/hat"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate Cruceta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc3469df-eaf6-4982-9d66-6177849c42a6"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6fba85f5-e4c0-467f-a20d-25b93feec054"",
                    ""path"": ""<HID::Logitech G29 Driving Force Racing Wheel>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""07ac009a-7da4-4e67-afb1-58dd03dbdf16"",
                    ""path"": ""<HID::Logitech G920 Driving Force Racing Wheel for Xbox One>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""039de44c-53db-4edf-b744-836abfcc1a63"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel B"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5834b5db-f16c-4f65-84ef-7d679527ee29"",
                    ""path"": ""<HID::Logitech G29 Driving Force Racing Wheel>/button3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel B"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0132559a-8f31-4a1d-b809-10cc27c5deff"",
                    ""path"": ""<HID::Logitech G920 Driving Force Racing Wheel for Xbox One>/button2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel B"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""95098c66-65d2-440d-ae7a-b27c82c86f8b"",
                    ""path"": ""<HID::Logitech G29 Driving Force Racing Wheel>/button10"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause Options"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3e501c0-f7c2-43b7-a57c-53566dbf367b"",
                    ""path"": ""<XInputController>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause Options"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""663423be-3c26-4b00-ab5a-8d1465ba7263"",
                    ""path"": ""<HID::Logitech G920 Driving Force Racing Wheel for Xbox One>/button7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause Options"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dea77136-072b-4566-9230-cb4bb606e78f"",
                    ""path"": ""<HID::Logitech G29 Driving Force Racing Wheel>/stick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Clutch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6503ac6a-8570-46dc-abf8-1bcab9a3df9e"",
                    ""path"": ""<HID::Logitech G29 Driving Force Racing Wheel>/button4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Nitro Y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c6029dd6-46c3-4b80-8eb1-8fb807dadc48"",
                    ""path"": ""<HID::Logitech G920 Driving Force Racing Wheel for Xbox One>/button4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Nitro Y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""342fcd65-bf37-4bd3-b6e3-25bfe98277cc"",
                    ""path"": ""<HID::Logitech G920 Driving Force Racing Wheel for Xbox One>/button3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Driving"",
            ""id"": ""7463775a-d77a-4e7c-b4a0-ab5ee795ac4a"",
            ""actions"": [
                {
                    ""name"": ""Steering"",
                    ""type"": ""Value"",
                    ""id"": ""499c7167-1d05-4ce4-96d8-a29fd0746b3f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Throttle"",
                    ""type"": ""Value"",
                    ""id"": ""5aaf92c9-e093-4a32-93f3-e0cc0d35fc33"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Reversa"",
                    ""type"": ""Value"",
                    ""id"": ""78dad71b-d489-4461-9fff-1a739dc037e3"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""59e549c9-7ee1-4c29-8cd3-ee3124862c3a"",
                    ""path"": ""<HID::Logitech G920 Driving Force Racing Wheel for Xbox One>/stick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d236213c-5918-40fd-9d6a-23af94baa663"",
                    ""path"": ""<HID::Logitech G920 Driving Force Racing Wheel for Xbox One>/stick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""10e6d9e5-831e-45d9-9db3-bcafb3ab7b21"",
                    ""path"": ""<HID::Logitech G920 Driving Force Racing Wheel for Xbox One>/rz"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reversa"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Game
        m_Game = asset.FindActionMap("Game", throwIfNotFound: true);
        m_Game_NavigateCruceta = m_Game.FindAction("Navigate Cruceta", throwIfNotFound: true);
        m_Game_SubmitA = m_Game.FindAction("Submit A", throwIfNotFound: true);
        m_Game_CancelB = m_Game.FindAction("Cancel B", throwIfNotFound: true);
        m_Game_PauseOptions = m_Game.FindAction("Pause Options", throwIfNotFound: true);
        m_Game_Clutch = m_Game.FindAction("Clutch", throwIfNotFound: true);
        m_Game_NitroY = m_Game.FindAction("Nitro Y", throwIfNotFound: true);
        m_Game_X = m_Game.FindAction("X", throwIfNotFound: true);
        // Driving
        m_Driving = asset.FindActionMap("Driving", throwIfNotFound: true);
        m_Driving_Steering = m_Driving.FindAction("Steering", throwIfNotFound: true);
        m_Driving_Throttle = m_Driving.FindAction("Throttle", throwIfNotFound: true);
        m_Driving_Reversa = m_Driving.FindAction("Reversa", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Game
    private readonly InputActionMap m_Game;
    private IGameActions m_GameActionsCallbackInterface;
    private readonly InputAction m_Game_NavigateCruceta;
    private readonly InputAction m_Game_SubmitA;
    private readonly InputAction m_Game_CancelB;
    private readonly InputAction m_Game_PauseOptions;
    private readonly InputAction m_Game_Clutch;
    private readonly InputAction m_Game_NitroY;
    private readonly InputAction m_Game_X;
    public struct GameActions
    {
        private @GameInput m_Wrapper;
        public GameActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @NavigateCruceta => m_Wrapper.m_Game_NavigateCruceta;
        public InputAction @SubmitA => m_Wrapper.m_Game_SubmitA;
        public InputAction @CancelB => m_Wrapper.m_Game_CancelB;
        public InputAction @PauseOptions => m_Wrapper.m_Game_PauseOptions;
        public InputAction @Clutch => m_Wrapper.m_Game_Clutch;
        public InputAction @NitroY => m_Wrapper.m_Game_NitroY;
        public InputAction @X => m_Wrapper.m_Game_X;
        public InputActionMap Get() { return m_Wrapper.m_Game; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActions set) { return set.Get(); }
        public void SetCallbacks(IGameActions instance)
        {
            if (m_Wrapper.m_GameActionsCallbackInterface != null)
            {
                @NavigateCruceta.started -= m_Wrapper.m_GameActionsCallbackInterface.OnNavigateCruceta;
                @NavigateCruceta.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnNavigateCruceta;
                @NavigateCruceta.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnNavigateCruceta;
                @SubmitA.started -= m_Wrapper.m_GameActionsCallbackInterface.OnSubmitA;
                @SubmitA.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnSubmitA;
                @SubmitA.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnSubmitA;
                @CancelB.started -= m_Wrapper.m_GameActionsCallbackInterface.OnCancelB;
                @CancelB.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnCancelB;
                @CancelB.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnCancelB;
                @PauseOptions.started -= m_Wrapper.m_GameActionsCallbackInterface.OnPauseOptions;
                @PauseOptions.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnPauseOptions;
                @PauseOptions.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnPauseOptions;
                @Clutch.started -= m_Wrapper.m_GameActionsCallbackInterface.OnClutch;
                @Clutch.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnClutch;
                @Clutch.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnClutch;
                @NitroY.started -= m_Wrapper.m_GameActionsCallbackInterface.OnNitroY;
                @NitroY.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnNitroY;
                @NitroY.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnNitroY;
                @X.started -= m_Wrapper.m_GameActionsCallbackInterface.OnX;
                @X.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnX;
                @X.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnX;
            }
            m_Wrapper.m_GameActionsCallbackInterface = instance;
            if (instance != null)
            {
                @NavigateCruceta.started += instance.OnNavigateCruceta;
                @NavigateCruceta.performed += instance.OnNavigateCruceta;
                @NavigateCruceta.canceled += instance.OnNavigateCruceta;
                @SubmitA.started += instance.OnSubmitA;
                @SubmitA.performed += instance.OnSubmitA;
                @SubmitA.canceled += instance.OnSubmitA;
                @CancelB.started += instance.OnCancelB;
                @CancelB.performed += instance.OnCancelB;
                @CancelB.canceled += instance.OnCancelB;
                @PauseOptions.started += instance.OnPauseOptions;
                @PauseOptions.performed += instance.OnPauseOptions;
                @PauseOptions.canceled += instance.OnPauseOptions;
                @Clutch.started += instance.OnClutch;
                @Clutch.performed += instance.OnClutch;
                @Clutch.canceled += instance.OnClutch;
                @NitroY.started += instance.OnNitroY;
                @NitroY.performed += instance.OnNitroY;
                @NitroY.canceled += instance.OnNitroY;
                @X.started += instance.OnX;
                @X.performed += instance.OnX;
                @X.canceled += instance.OnX;
            }
        }
    }
    public GameActions @Game => new GameActions(this);

    // Driving
    private readonly InputActionMap m_Driving;
    private IDrivingActions m_DrivingActionsCallbackInterface;
    private readonly InputAction m_Driving_Steering;
    private readonly InputAction m_Driving_Throttle;
    private readonly InputAction m_Driving_Reversa;
    public struct DrivingActions
    {
        private @GameInput m_Wrapper;
        public DrivingActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Steering => m_Wrapper.m_Driving_Steering;
        public InputAction @Throttle => m_Wrapper.m_Driving_Throttle;
        public InputAction @Reversa => m_Wrapper.m_Driving_Reversa;
        public InputActionMap Get() { return m_Wrapper.m_Driving; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DrivingActions set) { return set.Get(); }
        public void SetCallbacks(IDrivingActions instance)
        {
            if (m_Wrapper.m_DrivingActionsCallbackInterface != null)
            {
                @Steering.started -= m_Wrapper.m_DrivingActionsCallbackInterface.OnSteering;
                @Steering.performed -= m_Wrapper.m_DrivingActionsCallbackInterface.OnSteering;
                @Steering.canceled -= m_Wrapper.m_DrivingActionsCallbackInterface.OnSteering;
                @Throttle.started -= m_Wrapper.m_DrivingActionsCallbackInterface.OnThrottle;
                @Throttle.performed -= m_Wrapper.m_DrivingActionsCallbackInterface.OnThrottle;
                @Throttle.canceled -= m_Wrapper.m_DrivingActionsCallbackInterface.OnThrottle;
                @Reversa.started -= m_Wrapper.m_DrivingActionsCallbackInterface.OnReversa;
                @Reversa.performed -= m_Wrapper.m_DrivingActionsCallbackInterface.OnReversa;
                @Reversa.canceled -= m_Wrapper.m_DrivingActionsCallbackInterface.OnReversa;
            }
            m_Wrapper.m_DrivingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Steering.started += instance.OnSteering;
                @Steering.performed += instance.OnSteering;
                @Steering.canceled += instance.OnSteering;
                @Throttle.started += instance.OnThrottle;
                @Throttle.performed += instance.OnThrottle;
                @Throttle.canceled += instance.OnThrottle;
                @Reversa.started += instance.OnReversa;
                @Reversa.performed += instance.OnReversa;
                @Reversa.canceled += instance.OnReversa;
            }
        }
    }
    public DrivingActions @Driving => new DrivingActions(this);
    public interface IGameActions
    {
        void OnNavigateCruceta(InputAction.CallbackContext context);
        void OnSubmitA(InputAction.CallbackContext context);
        void OnCancelB(InputAction.CallbackContext context);
        void OnPauseOptions(InputAction.CallbackContext context);
        void OnClutch(InputAction.CallbackContext context);
        void OnNitroY(InputAction.CallbackContext context);
        void OnX(InputAction.CallbackContext context);
    }
    public interface IDrivingActions
    {
        void OnSteering(InputAction.CallbackContext context);
        void OnThrottle(InputAction.CallbackContext context);
        void OnReversa(InputAction.CallbackContext context);
    }
}
